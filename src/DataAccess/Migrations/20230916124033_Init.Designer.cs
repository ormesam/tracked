// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ModelDataContext))]
    [Migration("20230916124033_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.AccelerometerReading", b =>
                {
                    b.Property<int>("AccelerometerReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccelerometerReadingId"));

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.Property<double>("Z")
                        .HasColumnType("float");

                    b.HasKey("AccelerometerReadingId");

                    b.HasIndex("RideId");

                    b.ToTable("AccelerometerReadings");
                });

            modelBuilder.Entity("DataAccess.Models.DistanceAchievement", b =>
                {
                    b.Property<int>("DistanceAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceAchievementId"));

                    b.Property<double>("MinDistanceMiles")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DistanceAchievementId");

                    b.ToTable("DistanceAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.Jump", b =>
                {
                    b.Property<int>("JumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JumpId"));

                    b.Property<double>("Airtime")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("JumpId");

                    b.HasIndex("RideId");

                    b.ToTable("Jumps");
                });

            modelBuilder.Entity("DataAccess.Models.JumpAchievement", b =>
                {
                    b.Property<int>("JumpAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JumpAchievementId"));

                    b.Property<double>("MinAirtime")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("JumpAchievementId");

                    b.ToTable("JumpAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideId"));

                    b.Property<int>("AnalyserVersion")
                        .HasColumnType("int");

                    b.Property<double>("AverageSpeedMph")
                        .HasColumnType("float");

                    b.Property<double>("DistanceMiles")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxSpeedMph")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RouteSvgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("DataAccess.Models.RideLocation", b =>
                {
                    b.Property<int>("RideLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideLocationId"));

                    b.Property<double>("AccuracyInMetres")
                        .HasColumnType("float");

                    b.Property<double>("Altitude")
                        .HasColumnType("float");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Mph")
                        .HasColumnType("float");

                    b.Property<string>("RemovalReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("RideLocationId");

                    b.HasIndex("RideId");

                    b.ToTable("RideLocations");
                });

            modelBuilder.Entity("DataAccess.Models.SpeedAchievement", b =>
                {
                    b.Property<int>("SpeedAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeedAchievementId"));

                    b.Property<double>("MinMph")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SpeedAchievementId");

                    b.ToTable("SpeedAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.TraceMessage", b =>
                {
                    b.Property<int>("TraceMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraceMessageId"));

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraceMessageId");

                    b.ToTable("TraceMessages");
                });

            modelBuilder.Entity("DataAccess.Models.Trail", b =>
                {
                    b.Property<int>("TrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TrailId");

                    b.HasIndex("UserId");

                    b.ToTable("Trails");
                });

            modelBuilder.Entity("DataAccess.Models.TrailAttempt", b =>
                {
                    b.Property<int>("TrailAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailAttemptId"));

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Medal")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TrailAttemptId");

                    b.HasIndex("RideId");

                    b.HasIndex("TrailId");

                    b.HasIndex("UserId");

                    b.ToTable("TrailAttempts");
                });

            modelBuilder.Entity("DataAccess.Models.TrailLocation", b =>
                {
                    b.Property<int>("TrailLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailLocationId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TrailId")
                        .HasColumnType("int");

                    b.HasKey("TrailLocationId");

                    b.HasIndex("TrailId");

                    b.ToTable("TrailLocations");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoogleUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Models.UserBlock", b =>
                {
                    b.Property<int>("UserBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBlockId"));

                    b.Property<int>("BlockUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BlockedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserBlockId");

                    b.HasIndex("BlockUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlocks");
                });

            modelBuilder.Entity("DataAccess.Models.UserDistanceAchievement", b =>
                {
                    b.Property<int>("UserDistanceAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDistanceAchievementId"));

                    b.Property<int>("DistanceAchievementId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDistanceAchievementId");

                    b.HasIndex("DistanceAchievementId");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDistanceAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.UserFollow", b =>
                {
                    b.Property<int>("UserFollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFollowId"));

                    b.Property<int>("FollowUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFollowId");

                    b.HasIndex("FollowUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("DataAccess.Models.UserJumpAchievement", b =>
                {
                    b.Property<int>("UserJumpAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserJumpAchievementId"));

                    b.Property<int>("JumpAchievementId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserJumpAchievementId");

                    b.HasIndex("JumpAchievementId");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJumpAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.UserSpeedAchievement", b =>
                {
                    b.Property<int>("UserSpeedAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSpeedAchievementId"));

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedAchievementId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserSpeedAchievementId");

                    b.HasIndex("RideId");

                    b.HasIndex("SpeedAchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSpeedAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.AccelerometerReading", b =>
                {
                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("AccelerometerReadings")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("DataAccess.Models.Jump", b =>
                {
                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("Jumps")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("DataAccess.Models.Ride", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.RideLocation", b =>
                {
                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("RideLocations")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("DataAccess.Models.Trail", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Trails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.TrailAttempt", b =>
                {
                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("TrailAttempts")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Trail", "Trail")
                        .WithMany("TrailAttempts")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("TrailAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("Trail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.TrailLocation", b =>
                {
                    b.HasOne("DataAccess.Models.Trail", "Trail")
                        .WithMany("TrailLocations")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("DataAccess.Models.UserBlock", b =>
                {
                    b.HasOne("DataAccess.Models.User", "BlockUser")
                        .WithMany()
                        .HasForeignKey("BlockUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserDistanceAchievement", b =>
                {
                    b.HasOne("DataAccess.Models.DistanceAchievement", "DistanceAchievement")
                        .WithMany("UserDistanceAchievements")
                        .HasForeignKey("DistanceAchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("UserDistanceAchievements")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserDistanceAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistanceAchievement");

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserFollow", b =>
                {
                    b.HasOne("DataAccess.Models.User", "FollowUser")
                        .WithMany()
                        .HasForeignKey("FollowUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserJumpAchievement", b =>
                {
                    b.HasOne("DataAccess.Models.JumpAchievement", "JumpAchievement")
                        .WithMany("UserJumpAchievements")
                        .HasForeignKey("JumpAchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("UserJumpAchievements")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserJumpAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JumpAchievement");

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserSpeedAchievement", b =>
                {
                    b.HasOne("DataAccess.Models.Ride", "Ride")
                        .WithMany("UserSpeedAchievements")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.SpeedAchievement", "SpeedAchievement")
                        .WithMany("UserSpeedAchievements")
                        .HasForeignKey("SpeedAchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserSpeedAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("SpeedAchievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.DistanceAchievement", b =>
                {
                    b.Navigation("UserDistanceAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.JumpAchievement", b =>
                {
                    b.Navigation("UserJumpAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.Ride", b =>
                {
                    b.Navigation("AccelerometerReadings");

                    b.Navigation("Jumps");

                    b.Navigation("RideLocations");

                    b.Navigation("TrailAttempts");

                    b.Navigation("UserDistanceAchievements");

                    b.Navigation("UserJumpAchievements");

                    b.Navigation("UserSpeedAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.SpeedAchievement", b =>
                {
                    b.Navigation("UserSpeedAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.Trail", b =>
                {
                    b.Navigation("TrailAttempts");

                    b.Navigation("TrailLocations");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("TrailAttempts");

                    b.Navigation("Trails");

                    b.Navigation("UserDistanceAchievements");

                    b.Navigation("UserJumpAchievements");

                    b.Navigation("UserSpeedAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
